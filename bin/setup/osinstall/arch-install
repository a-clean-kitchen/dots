#!/bin/bash
## WARNING: this script will destroy data on the selected disk.
## This script can be run by executing the following:
##   curl -sL https://tinyurl.com/yfhke46d | bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

MIRRORLIST_URL="https://archlinux.org/mirrorlist/?country=US&protocol=https&use_mirror_status=on"

pacman -Sy --noconfirm pacman-contrib dialog

echo "Updating mirror list"
curl -s "$MIRRORLIST_URL" | \
    sed -e 's/^#Server/Server/' -e '/^#/d' | \
    grep edu | \
    rankmirrors -n 5 - > /etc/pacman.d/mirrorlist

### Get infomation from user ###
hostname=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
clear
: ${hostname:?"hostname cannot be empty"}

user=$(dialog --stdout --inputbox "Enter admin username" 0 0) || exit 1
clear
: ${user:?"user cannot be empty"}

# while passwords don't match
while true; do
    password=$(dialog --stdout --passwordbox "Enter admin password" 0 0) || exit 1
    : ${password:?"password cannot be empty"}
    password2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
    : ${password2:?"password cannot be empty"}
    [ "$password" == "$password2" ] && break
    dialog --title "Error" --msgbox "Passwords do not match" 0 0
done

devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
device=$(dialog --stdout --menu "Select installtion disk" 0 0 0 ${devicelist}) || exit 1
clear

### Set up logging ###
exec 1> >(tee "stdout.log")
exec 2> >(tee "stderr.log")

timedatectl set-ntp true

### Setup the disk and partitions ###
total_memory=$(free --mebi | awk '/Mem:/ {print $2}')
root_memory=$(( total_memory - 512 - 300 ))


swap_size=$(dialog --stdout --inputbox "Size (in MiB) of swap partition. Must be greater than 512, but no more than $root_memory" 0 0) || exit 1
clear
: ${swap_size:?"swap_size cannot be empty"}
[[ $swap_size -ge 512 ]] && [[ $swap_size -le $root_memory ]] || ( echo "swap_size must be between 512 and $root_memory"; exit 1; )

parted --script "${device}" -- mklabel gpt \
  mkpart ESP fat32 1Mib 300MiB \
  set 1 boot on \
  mkpart primary linux-swap 300MiB $(( swap_size + 300 ))MiB \
  mkpart primary btrfs $(( swap_size + 300 ))MiB 100%

# Simple globbing was not enough as on one device I needed to match /dev/mmcblk0p1
# but not /dev/mmcblk0boot1 while being able to match /dev/sda1 on other devices.
part_boot="$(ls ${device}* | grep -E "^${device}p?1$")"
part_swap="$(ls ${device}* | grep -E "^${device}p?2$")"
part_root="$(ls ${device}* | grep -E "^${device}p?3$")"

wipefs "${part_boot}"
wipefs "${part_swap}"
wipefs "${part_root}"

mkfs.fat -F 32 "${part_boot}"
mkswap "${part_swap}"
mkfs.btrfs -f "${part_root}"

swapon "${part_swap}"
mount "${part_root}" /mnt
mkdir /mnt/boot
mount "${part_boot}" /mnt/boot

pacstrap /mnt base base-devel linux linux-firmware grub efibootmgr zsh vim git dhcpcd

### check to see if you need wifi ###
need_wifi=$(dialog --stdout --yesno "Do you need wifi?" 0 0) || exit 1
if [ "$need_wifi" = "0" ]; then
    pacstrap /mnt iwd
    arch-chroot /mnt systemctl enable iwd.service
fi

### Set Timezone ###
arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
arch-chroot /mnt hwclock --systohc
genfstab -U /mnt >> /mnt/etc/fstab
echo "${hostname}" > /mnt/etc/hostname

### INTRRAMFS ###
if arch-chroot /mnt mkinitcpio -P; then
    echo "mkinitcpio -P succeeded"
else
    if [ ! -f /mnt/boot/initramfs-linux-fallback.img ]; then
      echo "ERROR: initramfs-linux-fallback.img was not created"
      exit 1
    fi
    echo "mkinitcpio -P \"failed\", but initramfs-linux-fallback.img was created"
fi

### BOOTLOADER? MORE LIKE... BUTTLOADER! ###
arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

echo "en_US.UTF-8 UTF-8" > /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf

arch-chroot /mnt useradd -mU -s /usr/bin/zsh -G wheel,uucp,video,audio,storage,games,input "$user"
arch-chroot /mnt chsh -s /usr/bin/zsh

# Enable networking services
arch-chroot /mnt systemctl enable systemd-networkd.service
arch-chroot /mnt systemctl enable systemd-resolved.service
arch-chroot /mnt systemctl enable systemd-networkd-wait-online.service

echo "$user:$password" | chpasswd --root /mnt
echo "root:$password" | chpasswd --root /mnt
